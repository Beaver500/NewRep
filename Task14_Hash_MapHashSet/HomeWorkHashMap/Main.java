package Task14_Hash_MapHashSet.HomeWorkHashMap;

import java.util.*;
// ЗАДАЧА  ГОТОВА
/*
*
Задача 1 (HashMap). Телефонный справочник
Описание
Эта задача про телефонный справочник с поддержкой групп контактов. Один контакт может входить в несколько групп. Например, если вы работаете со своим другом, то он будет в группах "Друзья" и "Работа". У пользователя должна быть возможность создания групп и контактов, добавления одного контакта в несколько групп.

Функционал программы
Создание группы;
Создание контакта;
Добавление контакта в разные группы;
Вывод групп с контактами.
*Пример
Программа справочник
Введите название группы контактов:
Семья <enter>
Создать еще одну группу (введите название или введите нет)?
Друзья <enter>
Создать еще одну группу (введите название или введите нет)?
нет <enter>
Создать контакт (введите наименование и его номер или введите нет)?
John Smith +7(911)111-11-11
Укажите группы контакта через пробел
Семья
Создать контакт (введите наименование или введите нет)?
нет <enter>
Группы в справочнике:
- Семья:
      Имя: John Smith, Телефон: +7(911)111-11-11
*Реализация
Создадим класс PhoneContacts, в котором будем хранить все созданные группы.
В классе PhoneContacts создадим HashMap: ключом для этой коллекции будет название группы, а значением — коллекция контактов.
Создадим класс Contact c полями: имя и номер телефона (при необходимости переоределим hashCode, equals, toString).
Создадим методы для добавления группы и контакта в группы в классе PhoneContacts.
В цикле создадим новые группы.
В другом цикле создадим новые контакты и добавим их в группы.
Выведем все группы с контактами.
Для демонстрации работы программы в коде создадим несколько контактов и добавим их в несколько групп.
Так как со временем наши задачи становятся всё объёмнее, пора бы задуматься об архитектуре нашего приложения: как можно больше логики выносите из функции main в небольшие, узкоспециализированные функции! Так будет намного легче писать/читать/поддерживать код.

*Дополнительное задание
Необходимо вывести все контакты в отсортированном виде (по фамилии). Для того чтобы наш список контактов был отсортирован, необходимо, чтобы класс Contact реализовывал интерфейс Comparable.

Реализация
Создадим List<Contact>, который будем всегда поддерживать отсортированным. Для этого перед добавлением очередного элемента в список будем находить для него правильную позицию, при которой имя предыдущего будет меньше, а имя следующего больше. Так как список у нас все время будет отсортированный, то эффективнее всего искать позицию для элемента с помощью бинарного поиска.

В Java этот алгоритм уже реализован в Collections.binarySearch(list, key):

если элемент содержится в списке, то метод вернет его позицию,
если элемента в коллекции нет, то метод вернет отрицательное значение рассчитанное по формуле: -index - 1, значит чтобы найти место вставки, можно взять абослютное значение и вычесть из него единицу: Math.abs(value) - 1. Можно воспользоваться им или написать свою реализацию.
* */

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PhoneContacts phoneContacts = new PhoneContacts();
        System.out.print("Справочник\nВведите название группы контактов: ");
        String group = scanner.nextLine();

        phoneContacts.addGroup(group);

//        ДОБАВИТЬ ГРУППУ
        while (true) {
            System.out.println("Создать еще одну группу (введите название или введите нет)?");
            String anotherGroup = scanner.nextLine();

            if ("нет".equals(anotherGroup)) {
                break;
            } else {
                phoneContacts.addGroup(anotherGroup);

//     проверка           phoneContacts.printContacts();
                System.out.println();
            }
        }

//        ДОБАВИТЬ КОНТАКТ

        while (true) {

            System.out.println("Создать контакт (введите наименование и его номер или введите нет)?");
            String inputContact = scanner.nextLine();

            if ("нет".equals(inputContact)) {
                break;
            } else {
                String[] arrayContactInput = inputContact.split("\\+", 2);
                String nameContact = arrayContactInput[0];
                String numberContact = arrayContactInput[1];
                Contact contact = new Contact(nameContact, numberContact);

                System.out.println("Укажите группы контакта через пробел");
                String groupsContact = scanner.nextLine();
                String[] arrayGroupsContact = groupsContact.split(" ");

                for (int i = 0; i < arrayGroupsContact.length; i++) {

                    phoneContacts.addContact(arrayGroupsContact[i], contact);

                }
            }
        }
        phoneContacts.printContacts();
    }
}