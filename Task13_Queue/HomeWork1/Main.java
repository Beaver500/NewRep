package Task13_Queue.HomeWork1;

/*Описание
Сегодня мы будем реализовывать программу для работы лифта 25-и этажного дома. Нужно написать программу, которая считывает данные из консоли, ожидая ввода номера этажа. После ввода каждого числа (номера этажа) добавляет значение в очередь дальнейшего перемещения лифта. Как только пользователь введет 0, программа должна последовательно вывести список всех этажей, на которых лифт делал остановки, в формате: "этаж 1 -> этаж 22 -> этаж 0". Если пользователь ввел этаж вне диапазона 0-25, проигнорировать ввод таких данных. Для реализации хранения введенных пользователем этажей отлично подойдет структура на основе интерфейса очередь (queue). По мере ввода мы сможем добавлять в конец очереди новые значения.
*************************************
Функционал программы
Ввод номеров этажей
Вывод информации о посещенных этажах в порядке добавления в формате: "этаж 1 -> этаж 22 -> этаж 0".
Пример
Ожидаю ввода этажа: (для завершения введите 0)
5 <enter>
Ожидаю ввода этажа: (для завершения введите 0)
12 <enter>
Ожидаю ввода этажа: (для завершения введите 0)
38 <enter>
Такого этажа нет в доме
Ожидаю ввода этажа: (для завершения введите 0)
0 <enter>
Лифт проследовал по следующим этажам:
этаж 5 -> этаж 12 - этаж 0
*************************************

Процесс реализации
В бесконечном цикле считывать номера этажей до тех пор, пока не будет введен нулевой этаж.
Перед каждым вводом запросить номер следующего этажа - вывести сообщение "Ожидаю ввода этажа: (для завершения введите 0)", чтобы пользователь понимал, что ему вводить.
Добавить проверку: если введенный этаж входит в диапазон допустимых значений 0-25, продолжить работу программы; а если не входит, то вывести на экран сообщение: "Такого этажа нет в доме".
Добавить проверку: если введенный этаж = 0, нужно выйти из цикла "чтение данных из консоли".
Если введенный этаж входит в диапазон 0-25, то нужно добавить значение в очередь и запросить ввод данных повторно.
Для вывода информации на экран, используя метод интерфейса Queue poll, прочитать последовательно все значения и вывести на экран.
* Дополнительное задание: рассчитать время движения лифта.
После ввода нулевого этажа, программа должна рассчитать время движения лифта вместе с остановками. Скорость движения лифта между парой этажей равна 5 секунд, время остановки на открытие и закрытие дверей лифта 10 секунд. Вывести информацию, сколько времени потребовалось лифту, чтобы пройти ранее введенные этажи.

Процесс реализации
Перед циклом вывода результата работы лифта нужно добавить несколько переменных: int waitDoorsInSeconds = 10 - количество секунд, которое потребуется на закрытие/открытие дверей; int waitMoveInSeconds = 5 - количество секунд, затрачиваемое лифтом на движение между этажами; int totalSeconds = 0 - всего потрачено времени на движение и остановки лифтом; int previousFloor = -1 - переменная для хранения предыдущей остановки.

В цикле проверяем, если previousFloor не равен -1, вычисляем разницу между текущим этажем и предыдущим и с помощью метода Math.abs найдем абсолютное значение (уберем знак) и умножим на время движения: totalSeconds += Math.abs(currentFloor - previousFloor) * waitMoveInSeconds

Добавим время открытия/закрытия дверей к totalSeconds: totalSeconds += waitDoorsInSeconds

После выхода из цикла выведем значение переменной totalSeconds на экран. System.out.println("Время затраченное лифтом на маршрут =: " + totalSeconds + " с.").

Завершим работу программы.*/
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    private static final int START_FLOOR = 0;
    private static final int END_FLOOR = 25;

    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);

        Queue<Integer> elevatorMovement = new LinkedList<>();
        while (true) {
            System.out.println("Ожидаю ввода этажа: (для завершения введите 0)");

            try {
                int floor = scan.nextInt();
                if (floor == 0) {
                    elevatorMovement.add(floor);
                    break;
                }

                if (floor < START_FLOOR || floor > END_FLOOR) {
                    System.out.println();
                    System.out.println("Такого этажа нет в доме");
                    System.out.println();
                    continue;
                }

                elevatorMovement.add(floor);

            } catch (NumberFormatException e) {
                System.out.println();
                System.out.println(" завершении программы ");
            }
        }
        int waitDoorsInSeconds = 10;
        int waitMoveInSeconds = 5;
        int previousFloor = -1;
        int totalSeconds = 0;
        int standStill = 0;
        int currentFloor = 0;

        System.out.println("Лифт проследовал по следующим этажам: ");
        while (!elevatorMovement.isEmpty()) {
            int floor = elevatorMovement.poll();
            System.out.print("этаж " + floor);
            if (floor != 0) {
                System.out.print(" -> ");
            }
            if (floor == standStill) {
                totalSeconds += waitDoorsInSeconds;
            } else {
                totalSeconds += Math.abs(currentFloor - previousFloor) * waitMoveInSeconds;
                totalSeconds += waitDoorsInSeconds;
            }

            standStill = floor;

        }
        System.out.println();
        System.out.println("Время затраченное лифтом на маршрут = " + totalSeconds + " с.");

    }
}